/**
 * http协议:
 *  超文本传输协议
 *  基于TCP/IP协议的应用层通信协议, 主要规定了通信双方进行请求和响应时,数据报文的格式
 * 
 * 网络通信协议大致分为以下几层:
 *  第一层(链路层)
 *  第二层(网络层):  IP协议
 *  第三层(传输层):  TCP协议/UDP协议
 *  第四层(应用层):  HTTP协议
 * 
 * 客户端向服务端的数据传输, 叫请求报文
 * 服务端向客户端的数据传输, 叫响应报文
 * 
 * (1) 请求报文
 *    a) 请求首行 (请求方式, url地址, http版本)
 *      如果是get请求, 客户端发送的数据, 就是url地址的查询字符串,路由参数,hash值
 *    b) 请求头
 *      请求头的信息, 一般是浏览器自动添加的信息:
 *        > Content-Type:application/x-www-form-urlencoded (请求体数据的格式)
 *        > content-length  请求体数据的长度(字节)
 *        > origin/referer  (请求所在的html文件来源,即在从哪个服务器来的)
 *    c) 请求空行
 *    d) 请求体  
 *      > 如果是get请求,没有请求体;
 *      > 如果是post请求,客户端发送的数据在请求体中
 * 
 * (2) 响应报文
 *    a) 响应首行   
 *      状态码
 *      >200: 响应成功
 *      >301/302: 重定向, 即服务器将新的url地址响应给客户端,让客户端向新的url发请求
 *      >304: 缓存, 即客户端直接从缓存中拿数据,并没有向服务器发请求
 *      >404: 客户端错误 (即客户端的url路径出现问题,访问不到指定的资源)
 *      >500: 服务器端错误 (即客户端的url路径没问题,但服务器端有问题)
 *    b) 响应头
 *      响应头一般也是固定的信息: 
 *       content-type:text/html;charset=utf-8  
 *       通知客户端该响应是text/html格式,编码时utf-8,让客户端按照指定方式进行解析
 *    c) 响应空行
 *    d) 响应体
 *        服务器向客户端响应的数据
 * 
 * get请求和post请求的区别:
 *   1) get请求的数据, 是在url中; post请求的数据在请求体中
 *   2) get请求相比post请求,没那么安全
 *   3) get请求传递的数据有限制, 因为浏览器地址栏有大小限制
 *   4) get请求通常用于, 获取服务器端数据; post请求用于向服务器端发送数据
 * 
 * 
 */